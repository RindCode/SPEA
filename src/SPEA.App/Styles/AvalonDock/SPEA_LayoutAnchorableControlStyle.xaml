<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:avalonDock="clr-namespace:AvalonDock;assembly=AvalonDock"
	xmlns:avalonDockControls="clr-namespace:AvalonDock.Controls;assembly=AvalonDock"
	xmlns:avalonDockConverters="clr-namespace:AvalonDock.Converters;assembly=AvalonDock"
	xmlns:avalonDockLayout="clr-namespace:AvalonDock.Layout;assembly=AvalonDock"
	xmlns:avalonDockProperties="clr-namespace:AvalonDock.Properties;assembly=AvalonDock">

    <!-- See https://github.com/Dirkster99/AvalonDock/blob/master/source/Components/AvalonDock/Themes/generic.xaml for the original styling source -->
    <!-- SPEA_ prefix designates that the style was redesigned for this application -->

    <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
                    <avalonDockControls:DropDownControlArea
                        DropDownContextMenu="{Binding Root.Manager.AnchorableContextMenu}"
                        DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                        <Border
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <ContentPresenter
									Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
									ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
									ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}" />
                                <avalonDockControls:DropDownControlArea
									Grid.Column="0"
									DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
									DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>
                        </Border>
                    </avalonDockControls:DropDownControlArea>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
                    <Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						KeyboardNavigation.TabNavigation="Cycle">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border
                                x:Name="Header"
                                Background="{DynamicResource LinearGradient.PrimaryPalette.Levels1to1a}"
                                BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level0a}"
                                BorderThickness="0,0,0,1">
                                <avalonDockControls:AnchorablePaneTitle
                                    Height="20"
                                    BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level2}"
                                    BorderThickness="0,1,0,0"
                                    Style="{StaticResource SPEA_AnchorablePaneTitleStyle}"
                                    Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Border>

                            <!--
								Added ContentTemplate and ContentTemplateSelector
								https://github.com/xceedsoftware/wpftoolkit/issues/1525
							-->
                            <ContentPresenter
								Grid.Row="1"
								Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
								FlowDirection="{TemplateBinding FlowDirection}" />

                            <!--<ContentPresenter
                                FlowDirection="{TemplateBinding FlowDirection}"
                                Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                Grid.Row="1"/>-->
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <!--
								Hide the title if the control is directly hosted in floating window
								The floating window control will show the title if there is only one control to host
								without any other LayoutAnchorableControl
							-->
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.IsFloating}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.Parent.IsDirectlyHostedInFloatingWindow}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <!--
								Also hide the title, if model cannot be bound which can happen when using virtualization
								See Issue #148 Drop Down Menu for LayoutAnchorables is not correct with Virtualization
							-->
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model}" Value="{x:Null}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>