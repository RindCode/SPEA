<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:exten="clr-namespace:SPEA.App.Extensions.AttachedProperties">
    
    <!-- Flat Buttons -->

    <!-- A simple flat button which has no accent when mouse is over. -->
    <Style x:Key="FlatButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Base}"/>
        <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels1to1a}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="exten:CornerRadiusExtension.CornerRadius" Value="{StaticResource Element.Tiny.CornerRadius}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            Name="MainBorder"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                            <Grid>
                                <ContentPresenter
                                    x:Name="ContentElement"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Content"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentElement" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- A simple button which shows some accent color when mouse is over. -->
    <Style x:Key="FlatButtonAccentBackgroundStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource FlatButtonStyle}">
        <Setter Property="exten:AccentColorExtension.AccentColor" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            x:Name="MainBorder"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                        </Border>
                        <Border
                            x:Name="AccentBorder"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding exten:AccentColorExtension.AccentColor}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Visibility="Hidden">
                        </Border>
                        <Grid>
                            <Border
                                Padding="{TemplateBinding Padding}">
                                <ContentPresenter
                                    x:Name="ContentElement"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Content"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="AccentBorder" Property="Visibility" Value="Visible"/>
                            <!--<Setter Property="Background" Value="{Binding (exten:AccentColorExtension.AccentColor), RelativeSource={RelativeSource Self}}"/>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentElement" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <!-- Raised Buttons -->

    <!-- Always has "raised" look and doesn't change it's appearance when mouse if over. -->
    <Style x:Key="RaisedButtonStyle_1" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Base}"/>
        <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels1to1a}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush.PrimaryPalette.Level0a}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="exten:CornerRadiusExtension.CornerRadius" Value="{StaticResource Element.Tiny.CornerRadius}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            Name="ContentBorder"
                            Padding="{TemplateBinding Padding}"
                            Margin="{TemplateBinding Margin}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                            <Border
                                x:Name="InnerBorder"
                                Margin="0,-0.5,0,0"
                                Padding="{TemplateBinding Padding}"
                                BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level2}"
                                BorderThickness="0,1,0,0"
                                CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}">
                                <ContentPresenter
                                    x:Name="ContentElement"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Content"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentElement" Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels0to1}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Another color option. -->
    <Style x:Key="RaisedButtonStyle_2" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource RaisedButtonStyle_1}">
        <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels2to2a}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush.PrimaryPalette.Level0a}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            Name="ContentBorder"
                            Padding="{TemplateBinding Padding}"
                            Margin="{TemplateBinding Margin}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                            <Border
                                x:Name="InnerBorder"
                                Margin="0,-0.5,0,0"
                                Padding="{TemplateBinding Padding}"
                                BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level3}"
                                BorderThickness="0,1,0,0"
                                CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}">
                                <ContentPresenter
                                    x:Name="ContentElement"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Content"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentElement" Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels0to1}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Another color option. -->
    <Style x:Key="RaisedButtonStyle_3" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource RaisedButtonStyle_1}">
        <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels3to4}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush.PrimaryPalette.Level0a}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            Name="ContentBorder"
                            Padding="{TemplateBinding Padding}"
                            Margin="{TemplateBinding Margin}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                            <Border
                                x:Name="InnerBorder"
                                Margin="0,-0.5,0,0"
                                Padding="{TemplateBinding Padding}"
                                BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level4}"
                                BorderThickness="0,1,0,0"
                                CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}">
                                <ContentPresenter
                                    x:Name="ContentElement"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Content"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentElement" Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels0to1}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Becomes "raised" only when mouse is over. -->
    <Style x:Key="RaisedOnMouseOverButtonStyle_1" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource RaisedButtonStyle_1}">
        <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels1to1a}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush.PrimaryPalette.Level0a}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            x:Name="ContentBorder"
                            Padding="{TemplateBinding Padding}"
                            Margin="{TemplateBinding Margin}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                            <Border
                                x:Name="InnerBorder"
                                Margin="0,-0.5,0,0"
                                Padding="1"
                                BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level2}"
                                BorderThickness="0,1,0,0"
                                CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}">
                                <ContentPresenter
                                    x:Name="ContentElement"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Content"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels0to1}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentElement" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Becomes "raised" only when mouse is over. Another option. -->
    <Style x:Key="RaisedOnMouseOverButtonStyle_2" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource RaisedButtonStyle_1}">
        <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels2to2a}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush.PrimaryPalette.Level0a}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            x:Name="ContentBorder"
                            Margin="{TemplateBinding Margin}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                            <Border
                                x:Name="InnerBorder"
                                Margin="0,-0.5,0,0"
                                Padding="{TemplateBinding Padding}"
                                BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level3}"
                                BorderThickness="0,1,0,0"
                                CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}">
                                <ContentPresenter
                                    x:Name="ContentElement"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Content"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels0to1}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentElement" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Becomes "raised" only when mouse is over. Another option. -->
    <Style x:Key="RaisedOnMouseOverButtonStyle_3" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource RaisedButtonStyle_1}">
        <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels3to4}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush.PrimaryPalette.Level0a}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            x:Name="ContentBorder"
                            Padding="{TemplateBinding Padding}"
                            Margin="{TemplateBinding Margin}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                            <Border
                                x:Name="InnerBorder"
                                Margin="0,-0.5,0,0"
                                Padding="1"
                                BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level4}"
                                BorderThickness="0,1,0,0"
                                CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}">
                                <ContentPresenter
                                    x:Name="ContentElement"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Content"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels0to1}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentElement" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Similar to raised button, but has an outer border which adds the underline below the button. -->
    <Style x:Key="RaisedOnMouseOverUnderlineButtonStyle_1" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource RaisedOnMouseOverButtonStyle_1}">
        <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels1to1a}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush.PrimaryPalette.Level0a}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            x:Name="OuterBorder"
                            Margin="{TemplateBinding Margin}"
                            BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level1a}"
                            BorderThickness="0,0,0,1"
                            CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}">
                            <Border
                                x:Name="ContentBorder"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch">
                                <Border
                                    x:Name="InnerBorder"
                                    Margin="0,-0.5,0,0"
                                    Padding="1"
                                    BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level2}"
                                    BorderThickness="0,1,0,0"
                                    CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}">
                                    <ContentPresenter
                                        x:Name="ContentElement"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        ContentSource="Content"/>
                                </Border>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <!--<Setter Property="Background" Value="{Binding (exten:AccentColorExtension.AccentColor), RelativeSource={RelativeSource Self}}"/>-->
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels0to1}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentElement" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Similar to raised button, but has an outer border which adds the underline below the button. Another option. -->
    <Style x:Key="RaisedOnMouseOverUnderlineButtonStyle_2" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource RaisedOnMouseOverButtonStyle_2}">
        <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels2to2a}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush.PrimaryPalette.Level0a}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            x:Name="OuterBorder"
                            Margin="{TemplateBinding Margin}"
                            BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level2}"
                            BorderThickness="0,0,0,1"
                            CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}">
                            <Border
                                x:Name="ContentBorder"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch">
                                <Border
                                    x:Name="InnerBorder"
                                    Margin="0,-0.5,0,0"
                                    Padding="1"
                                    BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level3}"
                                    BorderThickness="0,1,0,0"
                                    CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}">
                                    <ContentPresenter
                                        x:Name="ContentElement"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        ContentSource="Content"/>
                                </Border>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <!--<Setter Property="Background" Value="{Binding (exten:AccentColorExtension.AccentColor), RelativeSource={RelativeSource Self}}"/>-->
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels0to1}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentElement" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Similar to raised button, but has an outer border which adds the underline below the button. Another option. -->
    <Style x:Key="RaisedOnMouseOverUnderlineButtonStyle_3" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource RaisedOnMouseOverButtonStyle_3}">
        <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels3to4}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush.PrimaryPalette.Level0a}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border
                            x:Name="OuterBorder"
                            Margin="{TemplateBinding Margin}"
                            BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level3}"
                            BorderThickness="0,0,0,1"
                            CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}">
                            <Border
                                x:Name="ContentBorder"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch">
                                <Border
                                    x:Name="InnerBorder"
                                    Margin="0,-0.5,0,0"
                                    Padding="1"
                                    BorderBrush="{DynamicResource SolidColorBrush.PrimaryPalette.Level4}"
                                    BorderThickness="0,1,0,0"
                                    CornerRadius="{TemplateBinding exten:CornerRadiusExtension.CornerRadius}">
                                    <ContentPresenter
                                        x:Name="ContentElement"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        ContentSource="Content"/>
                                </Border>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <!--<Setter Property="Background" Value="{Binding (exten:AccentColorExtension.AccentColor), RelativeSource={RelativeSource Self}}"/>-->
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource LinearGradient.PrimaryPalette.Levels0to1}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentElement" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>